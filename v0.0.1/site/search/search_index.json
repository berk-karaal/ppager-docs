{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to ppager Docs \u00b6 ppager is a pager library that can be implemented to your projects easily. Install with pip \u00b6 pip install ppager PyPI link Default ppager instance: \u00b6 Customize Examples: \u00b6","title":"Home"},{"location":"#welcome-to-ppager-docs","text":"ppager is a pager library that can be implemented to your projects easily.","title":"Welcome to ppager Docs"},{"location":"#install-with-pip","text":"pip install ppager PyPI link","title":"Install with pip"},{"location":"#default-ppager-instance","text":"","title":"Default ppager instance:"},{"location":"#customize-examples","text":"","title":"Customize Examples:"},{"location":"features/","text":"Features \u00b6 Easily implemented to your Python projects \u00b6 Using ppager in your project is really easy and clean. ppager uses alternate screen and it protects your terminal page after ppager instance closed. Break lines \u00b6 Breaks lines that don't fit to screen. break_lines=True enables this feature. input text What is Lorem Ipsum? Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum. Why do we use it? It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like). Where does it come from? Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32. Where can I get some? There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc. output: Search \u00b6","title":"Features"},{"location":"features/#features","text":"","title":"Features"},{"location":"features/#easily-implemented-to-your-python-projects","text":"Using ppager in your project is really easy and clean. ppager uses alternate screen and it protects your terminal page after ppager instance closed.","title":"Easily implemented to your Python projects"},{"location":"features/#break-lines","text":"Breaks lines that don't fit to screen. break_lines=True enables this feature. input text What is Lorem Ipsum? Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum. Why do we use it? It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like). Where does it come from? Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32. Where can I get some? There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc. output:","title":"Break lines"},{"location":"features/#search","text":"","title":"Search"},{"location":"library/attributes/","text":"Pager Attributes \u00b6 class Pager : def __init__ ( self , text : list , tab_size : int = 4 , break_lines : bool = False , right_padding_for_text : int = 0 , line_numbers : bool = False , line_numbers_fg : str = \"-\" , line_numbers_bg : str = \"-\" , separator : str = \"\u2502\" , separator_fg : str = \"-\" , separator_bg : str = \"-\" , space_after_separator : bool = True , title_text : str = \"\" , center_title : bool = False , title_bg : str = \"-\" , title_fg : str = \"-\" , overflow_indicator : str = \">\" , overflow_indicator_fg : str = \"black\" , overflow_indicator_bg : str = \"white\" , end_text : str = \"(END)\" , end_fg : str = \"black\" , end_bg : str = \"white\" , bottom_bar_text : str = \"Quit(q) Help(h)\" , bottom_bar_bg : str = \"white\" , bottom_bar_fg : str = \"black\" , show_cursor_y_position : bool = True , show_cursor_y_percentage : bool = True , blink : bool = False , ): Attribute Type Default Description text list None Gets content to display. Elements of given list should represent lines of content. tab_size int 4 Defines how many spaces will be for a \"\\t\". break_lines bool False True if break line mode is on. right_padding_for_text int 0 Gives padding(empty space) to right side of terminal as much as given int. line_numbers bool False True if line numbers should be displayed on startup. (User can turn on or off line numbers while program is running) line_numbers_fg str \"-\" Foreground color of line numbers. Color Values line_numbers_bg str \"-\" Background color of line numbers. Color Values separator str \"\u2502\" Defines separator. separator_fg str \"-\" Foreground color of separator. Color Values separator_bg str \"-\" Background color of separator. Color Values space_after_separator bool True True if there should be a space between separator and text. title_text str \"\" Defines title that should be displayed. Empty string(default value) means do not display any title. center_title bool False True if title should be displayed horizontally centered. title_bg str \"-\" Background color of title. Color Values title_fg str \"-\" Foreground color of title. Color Values overflow_indicator str \">\" Defines overflow indicator. overflow_indicator_fg str \"black\" Foreground color of overflow indicator. Color Values overflow_indicator_bg str \"white\" Background color of overflow indicator. Color Values end_text str \"(END)\" Defines end text. end_fg str \"black\" Foreground color of end text. Color Values end_bg str \"white\" Background color of end text. Color Values bottom_bar_text str \"Quit(q) Help(h)\" Defines text that should be displayed in bottom bar. bottom_bar_bg str \"white\" Background color of bottom bar. Color Values bottom_bar_fg str \"black\" Foreground color of bottom bar. Color Values show_cursor_y_position bool True True if cursor y position should be displayed in bottom bar. show_cursor_y_percentage bool True True if cursor y percentage should be displayed in bottom bar. blink bool False True if blink mode should be activated. Attribute Usage Tips \u00b6 text \u00b6 You can convert your multiline string to a list with .splitlines() Check out example blink \u00b6 It's for developmental purposes. Do not activate it for endusers.","title":"Attributes"},{"location":"library/attributes/#pager-attributes","text":"class Pager : def __init__ ( self , text : list , tab_size : int = 4 , break_lines : bool = False , right_padding_for_text : int = 0 , line_numbers : bool = False , line_numbers_fg : str = \"-\" , line_numbers_bg : str = \"-\" , separator : str = \"\u2502\" , separator_fg : str = \"-\" , separator_bg : str = \"-\" , space_after_separator : bool = True , title_text : str = \"\" , center_title : bool = False , title_bg : str = \"-\" , title_fg : str = \"-\" , overflow_indicator : str = \">\" , overflow_indicator_fg : str = \"black\" , overflow_indicator_bg : str = \"white\" , end_text : str = \"(END)\" , end_fg : str = \"black\" , end_bg : str = \"white\" , bottom_bar_text : str = \"Quit(q) Help(h)\" , bottom_bar_bg : str = \"white\" , bottom_bar_fg : str = \"black\" , show_cursor_y_position : bool = True , show_cursor_y_percentage : bool = True , blink : bool = False , ): Attribute Type Default Description text list None Gets content to display. Elements of given list should represent lines of content. tab_size int 4 Defines how many spaces will be for a \"\\t\". break_lines bool False True if break line mode is on. right_padding_for_text int 0 Gives padding(empty space) to right side of terminal as much as given int. line_numbers bool False True if line numbers should be displayed on startup. (User can turn on or off line numbers while program is running) line_numbers_fg str \"-\" Foreground color of line numbers. Color Values line_numbers_bg str \"-\" Background color of line numbers. Color Values separator str \"\u2502\" Defines separator. separator_fg str \"-\" Foreground color of separator. Color Values separator_bg str \"-\" Background color of separator. Color Values space_after_separator bool True True if there should be a space between separator and text. title_text str \"\" Defines title that should be displayed. Empty string(default value) means do not display any title. center_title bool False True if title should be displayed horizontally centered. title_bg str \"-\" Background color of title. Color Values title_fg str \"-\" Foreground color of title. Color Values overflow_indicator str \">\" Defines overflow indicator. overflow_indicator_fg str \"black\" Foreground color of overflow indicator. Color Values overflow_indicator_bg str \"white\" Background color of overflow indicator. Color Values end_text str \"(END)\" Defines end text. end_fg str \"black\" Foreground color of end text. Color Values end_bg str \"white\" Background color of end text. Color Values bottom_bar_text str \"Quit(q) Help(h)\" Defines text that should be displayed in bottom bar. bottom_bar_bg str \"white\" Background color of bottom bar. Color Values bottom_bar_fg str \"black\" Foreground color of bottom bar. Color Values show_cursor_y_position bool True True if cursor y position should be displayed in bottom bar. show_cursor_y_percentage bool True True if cursor y percentage should be displayed in bottom bar. blink bool False True if blink mode should be activated.","title":"Pager Attributes"},{"location":"library/attributes/#attribute-usage-tips","text":"","title":"Attribute Usage Tips"},{"location":"library/attributes/#text","text":"You can convert your multiline string to a list with .splitlines() Check out example","title":"text"},{"location":"library/attributes/#blink","text":"It's for developmental purposes. Do not activate it for endusers.","title":"blink"},{"location":"library/basic_structure/","text":"Basic Structure \u00b6 import create an object run() from ppager.ppager import Pager my_text = \"\"\" Some kind of text. ppager is mainly designed to display multiple line texts. \"\"\" # create a Pager object my_pager = Pager ( text = my_text . splitlines (), # other attributes (optional) ) # and run it my_pager . run () Info Pager.run() returns a code that informs you about how Pager object ended. You can read Return codes documentation for more.","title":"Basic Structure"},{"location":"library/basic_structure/#basic-structure","text":"import create an object run() from ppager.ppager import Pager my_text = \"\"\" Some kind of text. ppager is mainly designed to display multiple line texts. \"\"\" # create a Pager object my_pager = Pager ( text = my_text . splitlines (), # other attributes (optional) ) # and run it my_pager . run () Info Pager.run() returns a code that informs you about how Pager object ended. You can read Return codes documentation for more.","title":"Basic Structure"},{"location":"library/colors/","text":"Colors \u00b6 colors are defined in ppager as: \u00b6 curses_colors = { \"-\" : - 1 , # Use default value which is used by terminal \"black\" : curses . COLOR_BLACK , \"blue\" : curses . COLOR_BLUE , \"cyan\" : curses . COLOR_CYAN , \"green\" : curses . COLOR_GREEN , \"magenta\" : curses . COLOR_MAGENTA , \"red\" : curses . COLOR_RED , \"white\" : curses . COLOR_WHITE , \"yellow\" : curses . COLOR_YELLOW , } Usage example: \u00b6 my_pager = Pager ( text =... , line_numbers_fg = \"black\" , line_numbers_bg = \"yellow\" , separator_bg = \"blue\" , separator_fg = \"white\" , overflow_indicator_bg = \"cyan\" , overflow_indicator_fg = \"red\" , end_bg = \"magenta\" , end_fg = \"green\" , )","title":"Colors"},{"location":"library/colors/#colors","text":"","title":"Colors"},{"location":"library/colors/#colors-are-defined-in-ppager-as","text":"curses_colors = { \"-\" : - 1 , # Use default value which is used by terminal \"black\" : curses . COLOR_BLACK , \"blue\" : curses . COLOR_BLUE , \"cyan\" : curses . COLOR_CYAN , \"green\" : curses . COLOR_GREEN , \"magenta\" : curses . COLOR_MAGENTA , \"red\" : curses . COLOR_RED , \"white\" : curses . COLOR_WHITE , \"yellow\" : curses . COLOR_YELLOW , }","title":"colors are defined in ppager as:"},{"location":"library/colors/#usage-example","text":"my_pager = Pager ( text =... , line_numbers_fg = \"black\" , line_numbers_bg = \"yellow\" , separator_bg = \"blue\" , separator_fg = \"white\" , overflow_indicator_bg = \"cyan\" , overflow_indicator_fg = \"red\" , end_bg = \"magenta\" , end_fg = \"green\" , )","title":"Usage example:"},{"location":"library/namings/","text":"Naming explanations \u00b6","title":"Namings"},{"location":"library/namings/#naming-explanations","text":"","title":"Naming explanations"},{"location":"library/return_codes/","text":"Return codes \u00b6 Pager.run() returns a string that informs you about how Pager object ended. You can use that information if your project needs. Codes: \u00b6 Code Description \"ok\" User quit through available commands. \"keyboard_interrupt\" User pressed ctrl+c \"curses_error\" User exited after a curses error occured \"error\" User exited after a error other than listed above. Usage example: \u00b6 from ppager.ppager import Pager with open ( \"some_text.txt\" ) as file : file_text = file . read () . splitlines () pager = Pager ( text = file_text ) return_code = pager . run () print ( \" \\n \" + return_code + \" \\n \" )","title":"Return Codes"},{"location":"library/return_codes/#return-codes","text":"Pager.run() returns a string that informs you about how Pager object ended. You can use that information if your project needs.","title":"Return codes"},{"location":"library/return_codes/#codes","text":"Code Description \"ok\" User quit through available commands. \"keyboard_interrupt\" User pressed ctrl+c \"curses_error\" User exited after a curses error occured \"error\" User exited after a error other than listed above.","title":"Codes:"},{"location":"library/return_codes/#usage-example","text":"from ppager.ppager import Pager with open ( \"some_text.txt\" ) as file : file_text = file . read () . splitlines () pager = Pager ( text = file_text ) return_code = pager . run () print ( \" \\n \" + return_code + \" \\n \" )","title":"Usage example:"}]}